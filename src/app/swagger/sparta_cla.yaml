swagger: '2.0'
info:
  description: >
    API para criar e buscar dados do Sparta Clã. Um token válido é necessário para acessar os endpoints
  version: 1.0.0
  title: Sparta Clã
  termsOfService: TBD
  contact:
    email: contato@spartacla.com.br
  license:
    name: SpartaClan
    url: 'https://spartaclan.herokuapp.com'
host: spartaclan.herokuapp.com
basePath: /
tags:
  - name: Sparta Clã
    description: API de consumo Activision
schemes:
  - https
paths:
  /stats/getStats/{wzProfile}/{platform}:
    get:
      tags:
        - Pesquisar Stats do Usuario
      summary: Microservico para pesquisar Dados do Usuario
      description: 'Microservico para pesquisar Dados do Usuario,  Cloud Function Node'
      operationId: getStats
      #consumes:
      #- application/json
      produces:
        - application/json
      parameters:
        - name: wzProfile
          in: path
          description: Campo Usuario
          required: true
          type: string
        - name: platform
          in: path
          description: Campo Plataforma
          required: true
          type: string
      responses:
        '200':
          description: Dados do Usuario
          headers:
            Location:
              type: string
          schema:
            $ref: '#/definitions/Stats'
        '400':
          description: Request Invalida
        '500':
          description: Server Error
        '404':
          description: Url Nao Encontrada
        '409':
          description: Entrada invalida

  /spartaclan/createAccount:
    post:
      tags:
        - Criar Usuario
      summary: Microservico para criar usuário
      description: 'Cria Usuário no sistema'
      operationId: createAccount
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Dados para Criar um Usuário
          required: true
          schema:
            $ref: '#/definitions/Usuario'
      responses:
        '200':
          description: Dados do Usuário
          headers:
            Location:
              type: string
              description: Usuário Criado
          schema:
            $ref: '#/definitions/Usuario'
        '400':
          description: Request Invalida
        '500':
          description: Server Error
        '404':
          description: Url Nao Encontrada
        '409':
          description: Entrada invalida

  /spartaclan/getUser/{idUser}:
    get:
      tags:
        - "Retorna um Usuario pelo ID"
      summary: "Retorna um usuário"
      description: "Retorna um usuário"
      operationId: "getUser"
      produces:
        - "application/json"
      parameters:
        - name: "idUser"
          in: "path"
          description: "ID do Usuário"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Usuario"
        "400":
          description: "Ocorreu um erro"
        "404":
          description: "Usuario não encontrado"

  /spartaclan/completeAccount:
    put:
      tags:
        - Finalizar perfil Usuario
      summary: Microservico para finalizar cadastro do usuário
      description: 'Finalizar cadastro do usuário no sistema'
      operationId: completeAccount
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Dados para Finalizar o cadastro de um Usuário
          required: true
          schema:
            $ref: '#/definitions/Usuario'
      responses:
        '200':
          description: Dados do Usuário
          headers:
            Location:
              type: string
              description: Usuário Criado
          schema:
            $ref: '#/definitions/Usuario'
        '400':
          description: Request Invalida
        '500':
          description: Server Error
        '404':
          description: Url Nao Encontrada
        '409':
          description: Entrada invalida

  /spartaclan/editAccount:
    put:
      tags:
        - Editar perfil Usuario
      summary: Microservico para editar cadastro do usuário (somente campos permitidos)
      description: 'Editar cadastro do usuário no sistema'
      operationId: editAccount
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Dados para editar o cadastro de um Usuário
          required: true
          schema:
            $ref: '#/definitions/EditUsuario'
      responses:
        '200':
          description: Dados do Usuário
          headers:
            Location:
              type: string
              description: Usuário Alterado
          schema:
            $ref: '#/definitions/EditUsuario'
        '400':
          description: Request Invalida
        '500':
          description: Server Error
        '404':
          description: Url Nao Encontrada
        '409':
          description: Entrada invalida

  /spartaclan/getAllUsers:
    get:
      tags:
        - "Listar Todos Usuários Ativos"
      summary: "Lista todos os Usuários ativos"
      description: "Lista todos os Usuários ativos"
      operationId: "getAllUsers"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Usuario"
        "400":
          description: "Ocorreu um erro"
        "404":
          description: "Usuários não encontrados"

  /spartaclan/confirmEmail/{validationCode}:
    post:
      tags:
        - "Validar Email Cadastrado"
      summary: "Validar Email cadastrado"
      description: ""
      operationId: "confirmEmail"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "validationCode"
          in: "path"
          description: "Código random"
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "boolean"

  /spartaclan/getNotifications/{idUser}:
    get:
      tags:
        - "Retorna as Notificações de um usuário pelo id"
      summary: "Retorna as Notificações de um usuário"
      description: "Retorna um usuário"
      operationId: "getNotifications"
      produces:
        - "application/json"
      parameters:
        - name: "idUser"
          in: "path"
          description: "ID do Usuário"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Notification"
        "400":
          description: "Ocorreu um erro"
        "404":
          description: "Notificações não encontradas"

  /tournaments/getAllTournaments:
    get:
      tags:
        - "Listar Todos Campeonatos Ativos"
      summary: "Lista todos os campeonatos ativos"
      description: "Lista todos os campeonatos ativos"
      operationId: "getAllTournaments"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Campeonato"
        "400":
          description: "Ocorreu um erro"
        "404":
          description: "Campeonatos não encontrados"

  /tournaments/newTournament:
    post:
      tags:
        - Criar Torneio
      summary: Microserviço para criar um novo torneio
      description: 'Cria um novo torneio'
      operationId: newTournament
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Dados para Criar um novo torneio
          required: true
          schema:
            $ref: '#/definitions/Campeonato'
      responses:
        '200':
          description: "campeonato criado com sucesso!"
          schema:
            type: "object"
            properties:
              code:
                type: integer
              text:
                type: string
              subText:
                type: string
        '400':
          description: Request Invalida
        '500':
          description: Server Error
        '404':
          description: Url Nao Encontrada
        '409':
          description: Entrada invalida

  /tournaments/editTournament:
    put:
      tags:
        - Editar Torneio
      summary: Microserviço para editar um torneio
      description: 'Cria um novo torneio'
      operationId: editTournament
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Dados para editar um torneio
          required: true
          schema:
            $ref: '#/definitions/Campeonato'
      responses:
        '200':
          description: "campeonato editado com sucesso!"
          schema:
            type: "object"
            properties:
              code:
                type: integer
              text:
                type: string
              subText:
                type: string
        '400':
          description: Request Invalida
        '500':
          description: Server Error
        '404':
          description: Url Nao Encontrada
        '409':
          description: Entrada invalida

  /tournaments/getTournament/{idCamp}:
    get:
      tags:
        - "Retorna um Torneio pelo ID"
      summary: "Retorna um torneio"
      description: "Retorna um torneio"
      operationId: "getTournament"
      produces:
        - "application/json"
      parameters:
        - name: "idCamp"
          in: "path"
          description: "ID do torneio"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Campeonato"
        "400":
          description: "Ocorreu um erro"
        "404":
          description: "Campeonato não encontrado"

  /tournaments/disableTournament/{id}:
    delete:
      tags:
        - "Desativa um Torneio pelo ID"
      summary: "Desativa um torneio"
      description: "Desativa um torneio"
      operationId: "disableTournament"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID do torneio"
          required: true
          type: "integer"
          format: "int64"
      responses:
        '200':
          description: "campeonato desativado com sucesso!"
          schema:
            type: "object"
            properties:
              code:
                type: integer
              text:
                type: string
              subText:
                type: string
        "400":
          description: "Ocorreu um erro"
        "404":
          description: "Campeonato não encontrado"

  /tournaments/registerTournament:
    post:
      tags:
        - Registrar em um Torneio
      summary: Microserviço para registrar em um torneio
      description: 'Registra em um torneio'
      operationId: registerTournament
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Dados para Registrar em um torneio
          required: true
          schema:
            $ref: '#/definitions/RegistrarCampeonato'
      responses:
        '200':
          description: "campeonato registrado com sucesso!"
          schema:
            type: "object"
            properties:
              code:
                type: integer
              text:
                type: string
              subText:
                type: string
        '400':
          description: Request Invalida
        '500':
          description: Server Error
        '404':
          description: Url Nao Encontrada
        '409':
          description: Entrada invalida

  /tournaments/getSubscription/{idUser}:
    get:
      tags:
        - "Retorna as inscrições em um campeonato pelo ID do usuário"
      summary: "Retorna inscrições"
      description: "Retorna inscrições"
      operationId: "getSubscription"
      produces:
        - "application/json"
      parameters:
        - name: "idUser"
          in: "path"
          description: "ID do usuário"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/RegistrarCampeonato"
        "400":
          description: "Ocorreu um erro"
        "404":
          description: "Inscrição não encontrada"

  /tournaments/getRecentMembers/{idUser}:
    get:
      tags:
        - "Retorna os membros de time recentes pelo ID do usuário"
      summary: "Retorna inscrições"
      description: "Retorna membros recentes"
      operationId: "getRecentMembers"
      produces:
        - "application/json"
      parameters:
        - name: "idUser"
          in: "path"
          description: "ID do usuário"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/MembrosTime"
        "400":
          description: "Ocorreu um erro"
        "404":
          description: "Membros não encontrados"

definitions:
  Stats:
    properties:
      stats:
        type: object
        description: Stats

  Usuario:
    properties:
      idUser:
        type: "integer"
        format: "int64"
        description: Id do usuário
      email:
        type: string
        description: email do usuario
      password:
        type: string
        description: Senha do usuario
      username:
        type: string
        description: Usuário deve ser único
      nome:
        type: string
        description: Nome completo do usuario
      pais:
        type: string
        description: País onde o usuario vive
      estado:
        type: string
        description: Estado onde o usuario vive
      nascimento:
        type: string
        description: Data de nascimento do usuario
      dataCadastro:
        type: string
        description: Data de cadastro do usuario
      wzProfile:
        type: string
        description: Usuario da conta de acordo com a plataforma (exemplo usuário da PSN)
      platform:
        type: string
        description: Plataforma a qual o usuario joga (exemplo PSN)
      pendingRegistration:
        type: boolean
        description: False se o usuario finalizou o cadastro
      pendingEmailConfirmation:
        type: boolean
        description: False se o usuario confirmou o email cadastrado
      message:
        type: object
        properties:
          code:
            type: integer
          text:
            type: string
          subText:
            type: string
        description: Campo para uso geral de alertas e mensagens
      validationCode:
        type: string
        description: Campo para uso na validação do email

  EditUsuario:
    properties:
      idUser:
        type: "integer"
        format: "int64"
        description: Id do usuário
      username:
        type: string
        description: Usuário deve ser único
      pais:
        type: string
        description: País onde o usuario vive
      estado:
        type: string
        description: Estado onde o usuario vive
      nascimento:
        type: string
        description: Data de nascimento do usuario
      wzProfile:
        type: string
        description: Usuario da conta de acordo com a plataforma (exemplo usuário da PSN)
      platform:
        type: string
        description: Plataforma a qual o usuario joga (exemplo PSN)


  Notification:
    properties:
      idNot:
        type: integer
        format: "int64"
        description: id da notificação
      title:
        type: string
        description: Título da notificação
      message:
        type: string
        description: Mensagem da notificação
      date:
        type: string
        description: Data da notificação
      read:
        type: boolean
        description: Informa se a notificação já foi vista

  Campeonato:
    properties:
      idCamp:
        type: integer
        format: "int64"
        description: id do campeonato
      mode:
        type: string
        description: Modo do campeonato, ex Duo
      date:
        type: string
        description: Data do campeonato
      award:
        type: string
        description: Premiação do campeonato
      duration:
        type: string
        description: Duração do campeonato
      start:
        type: string
        description: Horario de início do campeonato
      scoring:
        type: string
        description: Forma de calcular o ganhador do campeonato
      division:
        type: integer
        description: Divisão de acordo com KD
      cost:
        type: string
        description: Custo para participar do campeonato
      active:
        type: boolean
        description: Verifica campeonato ainda está ativo ou não
      privateCamp:
        type: boolean
        description: Informa se é um campeonato privado ou público
      times:
        type: integer
        description: Quantidade de times que podem se inscrever

  RegistrarCampeonato:
    properties:
      idCamp:
        type: integer
        format: "int64"
        description: id do campeonato
      idUser:
        type: integer
        format: "int64"
        description: id do usuário
      nomeTime:
        type: string
        description: Nome do time
      membersConfirmed:
        type: boolean
        description: Informa se todos participantes confirmaram presença
      membrosTime:
        type: string
        description: Emails e status de inscrição dos membros (formato JSON)
      data:
        type: string
        description: Data da inscrição
      position:
        type: integer
        format: "int32"
        description: Posição no campeonato

  MembrosTime:
    type: object
    properties:
      email:
        type: string
        description: Membros do Time
      confirmed:
        type: boolean
        description: Informa se confirmou inscrição

